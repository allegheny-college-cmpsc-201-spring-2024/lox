# CMPSC 201: Resolving and Binding Scopes

1. Consider the following function:
```
fun l(o,x) {  
  if (o + x == 0) return;
  print o + x;
  l(o - 1, x - 1);
}

l(10, 10);
```
If we argue that we can't _use_ a variable before it's defined, why do this work?

TODO: Respond to the question above.

2. We know that the following `Lox` code is OK:
```
var a = "outer";
{
  var a = 4;
  print a;
}
print a;
```
However, this is _not_:
```
var a = "outer";
{
  var a = a;
}
```
The answer to this question comes in `3` parts:

- Why is this illegal in `Lox`?
- Does `Java` support this? How does the language design enable or prohibit it?
- Likewise, does `Python` support this? In what ways does language design enable or prohibit it?

TODO: Respond to the question above.
